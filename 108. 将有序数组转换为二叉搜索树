## 108. 将有序数组转换为二叉搜索树
链接：https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/


给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。

高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。

## 思路

二叉搜索树，有个特点，左<根<右

题目中是给的nums是升序 排列，所以可以看做是二叉搜索树的中序遍历

如何找到根节点，是本题的关键。

如果数组是奇数，那么(left+right)//2 一定是根节点

如果数组是偶数，那么(left+right)//2，(left+right)//2 + 1 二者中随意一个都可以

为了方便，我们取(left+right)//2作为根节点，然后利用递归，寻找左节点、右节点


## 代码

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        if len(nums) == 0:
            return None
        def help(left:int,right:int) -> TreeNode:
            if left > right:
                return None
            mid = (left+right)//2
            node = TreeNode()
            node.val = nums[mid]
            node.left = help(left,mid-1)
            node.right = help(mid+1,right)
            return node
        return help(0,len(nums)-1)